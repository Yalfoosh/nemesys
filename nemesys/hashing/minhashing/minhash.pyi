from typing import Any, Callable, Iterable, Optional

class MinHash:
    def __init__(
        self,
        n_permutations: Any,
        seed: Any,
        preprocess_function: Callable[[Any], Any],
        prime: Optional[Any],
        base_state: Optional[Any],
        bound: Optional[Any],
    ): ...
    @property
    def a(self) -> Any: ...
    @property
    def b(self) -> Any: ...
    @property
    def base_state(self) -> Any: ...
    @property
    def bound(self) -> Any: ...
    @property
    def n_permutations(self) -> Any: ...
    @property
    def preprocess_function(self) -> Callable[[Any], Any]: ...
    @property
    def prime(self) -> Any: ...
    @property
    def seed(self) -> Any: ...
    @property
    def state(self) -> Any: ...
    @state.getter
    def state(self, value: Any): ...
    @staticmethod
    def preprocess(data: Any, preprocess_function: Callable[[Any], Any]) -> Any: ...
    @staticmethod
    def data_to_base_hash(data: Any, a: Any, b: Any, prime: Any) -> Any: ...
    @staticmethod
    def base_hash_to_bounded_hash(base_hash: Any, bound: Any) -> Any: ...
    @staticmethod
    def bounded_hash_to_minhash(bounded_hash: Any, state: Any) -> Any: ...
    @staticmethod
    def preprocess_batch(
        data_batch: Iterable[Any], preprocess_function: Callable[[Any], Any]
    ) -> Iterable[Any]: ...
    @staticmethod
    def data_batch_to_base_hashes(
        data_batch: Iterable[Any], a: Any, b: Any, prime: Any
    ) -> Iterable[Any]: ...
    @staticmethod
    def base_hashes_to_bounded_hashes(
        base_hashes: Iterable[Any], bound: Any
    ) -> Iterable[Any]: ...
    @staticmethod
    def bounded_hashes_to_minhash(bounded_hashes: Iterable[Any], state: Any) -> Any: ...
    def get_hash_eager(self, data: Any) -> Any: ...
    def get_minhash_eager(self, data: Any, state: Optional[Any]) -> Any: ...
    def update(self, data: Any) -> Any: ...
    def get_hash_batch_eager(self, data_batch: Iterable[Any]) -> Iterable[Any]: ...
    def get_minhash_batch_eager(
        self, data_batch: Iterable[Any], state: Optional[Any]
    ) -> Any: ...
    def update_batch(self, data_batch: Iterable[Any]) -> Any:
        self._state = self.get_minhash_batch_eager(
            data_batch=data_batch, state=self.state
        )
    def get_hash_many_eager(self, data_many: Iterable[Any]) -> Iterable[Any]: ...
    def get_minhash_many_eager(
        self, data_many: Iterable[Any], state: Optional[Any]
    ) -> Iterable[Any]: ...
    def get_hash_batch_many_eager(
        self, data_batch_many: Iterable[Iterable[Any]]
    ) -> Iterable[Any]: ...
    def get_minhash_batch_many_eager(
        self, data_batch_many: Iterable[Iterable[Any]], state: Optional[Any] = None
    ) -> Iterable[Any]: ...
    def clear(self): ...
    def digest(self) -> Any: ...
