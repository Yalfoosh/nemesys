from typing import Any, Iterable, Set, Tuple, Union, Optional

import torch

from nemesys.modelling.blocks.shaped_block import ShapedBlock

class PyTorchBlock(ShapedBlock):
    _init_methods: Set[str]
    def __init__(
        self,
        base_shape: Union[int, Iterable[int]],
        dtype: Union[str, torch.dtype],
        device: Union[str, torch.device],
    ): ...
    @property
    def dtype(self) -> torch.dtype: ...
    @property
    def device(self) -> torch.device: ...
    @staticmethod
    def from_tensor(tensor: torch.Tensor) -> "PyTorchBlock": ...
    @staticmethod
    def prepare_data(content: torch.Tensor) -> torch.Tensor: ...
    @staticmethod
    def prepare_default(
        base_shape: Tuple[int, ...],
        dtype: torch.dtype,
        device: torch.device,
    ) -> torch.Tensor: ...
    @staticmethod
    def prepare_tensor(
        content: Optional[torch.Tensor],
        base_shape: Tuple[int, ...],
        dtype: torch.dtype,
        device: torch.device,
    ) -> torch.Tensor: ...
    def get_data(self) -> torch.Tensor: ...
    def get_defaulted(self) -> torch.Tensor: ...
    def get_tensor(self, content: Optional[torch.Tensor]) -> torch.Tensor: ...
    @property
    def data(self) -> torch.Tensor: ...
    @data.setter
    def data(self, value: torch.Tensor): ...
    @staticmethod
    def init_from(content: Any, cast_method: Optional[str]) -> "PyTorchBlock": ...
    def clone(self) -> "PyTorchBlock": ...
    def default(self) -> "PyTorchBlock": ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    # endregion
