from typing import Any, Iterable, Optional

from nemesys.modelling.stores.store import Store
from nemesys.modelling.blocks.pytorch_block import PyTorchBlock

class PyTorchStore(Store):
    @property
    def blocks(self) -> Iterable[PyTorchBlock]: ...
    @staticmethod
    def init_from(content: Any, method: Optional[str]) -> "PyTorchStore": ...
    def append(self, content: PyTorchBlock): ...
    def get_all(self) -> Iterable[PyTorchBlock]: ...
    def get_one(self, key: Any) -> PyTorchBlock: ...
    def get_some(self, keys: Iterable[Any]) -> Iterable[PyTorchBlock]: ...
    def remove_all(self): ...
    def remove_one(self, key: Any): ...
    def remove_some(self, keys: Iterable[Any]): ...
    def set_all(self, content: Iterable[PyTorchBlock]): ...
    def set_one(self, key: Any, content: PyTorchBlock): ...
    def set_some(self, keys: Iterable[Any], contents: Iterable[PyTorchBlock]): ...
